#include <iregdef.h>
.data
buffer: .space 20 #*change #maximum 20 char
prompt: .asciiz "Enter the binary number to convert: "
ans: .asciiz "\nDecimal equivalent: "
result: .space 8 #result is saved here
decimal_str: .asciiz "%d"
.text
.globl main

main:
	la a0, prompt #load string `promt
	jal printf #print
	nop
	jal InputBin #InputBin string into buffer
	nop
	add s2,v1,zero
	
	la a0, ans #load string `ans
	jal printf #printf
	nop
	la a0,buffer
	add a1,s2,zero
	jal Bin2Dec
	la a0,decimal_str
	add a1,v0,zero
	jal printf
	nop

.ent InputBin	
InputBin:
	move s1,ra #store restore address
	li s0,20 #load maximum size of `buffer
	li t0,0 #t0 as i
	cont_InputBin:
		jal getchar #get 1 char
		nop
		li v1,'\n'
		sub t1,v0,v1
		beq t1,zero,finish_InputBin #if getchar() == '\n' --> finish InputBin
		nop
		ble v0,47,cont_InputBin #determine what is InputBined
		nop
		bge v0,50,cont_InputBin #determine what is InputBined
		nop
		add t1,v0,zero
		sb t1,buffer(t0) #save to buffer
		add a0,t1,zero
		jal putchar
		nop
		addi t0,t0,1 #i++
		slt t1,s0,t0
		beq t1,zero,cont_InputBin #if i < 20 continue getchar
		nop
	finish_InputBin:
		sb zero,buffer(t0) #ending zero
		add v1,t0,zero
		move ra,s1
		jr ra
		nop
.end InputBin

.ent Bin2Dec
Bin2Dec:
	add t0,a0,zero #beginning of buffer
	add t2,a1,-1 #the last element of buffer
	add t1,t2,zero #t1 as j, j from (buffer.length-1) to 0
	li t3,0 #i in 2^i
	add v0,zero,zero
	loop_t1_Bin2Dec:
		add t4,t0,t1
		lb t5,0(t4) #t5 as buffer[j]
		beq t5,48,next_bit_Bin2Dec
		nop
		li t7,1 #t7 as 2^i
		beq t3,0,compute_dec_Bin2Dec
		nop
		li t7,2 #initialize the t7 = 2^1, then will compute t7
		li t6,0
		loop_t6_Bin2Dec: #loop to compute 2^i if i>0
			add t6,t6,1
			bge t6,t3,compute_dec_Bin2Dec
			nop
			add t7,t7,t7
			j loop_t6_Bin2Dec
			nop
		compute_dec_Bin2Dec:
			add v0,v0,t7
		next_bit_Bin2Dec:
            add t3,t3,1 #i++, increase level of power of 2
			add t1,t1,-1 #j--
			ble t1,-1,finish_Bin2Dec
			nop
			j loop_t1_Bin2Dec
			nop
	finish_Bin2Dec:
	jr ra
	nop
.end Bin2Dec
#The End
