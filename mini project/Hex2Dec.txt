#include <iregdef.h>
.data
buffer: .space 20 #*change #maximum 20 char
prompt: .asciiz "Enter the hex number to convert: "
ans: .asciiz "\nDecimal equivalent: "
result: .space 8 #result is saved here
decimal_str: .asciiz "%d"
.text
.globl main

main:
	la a0, prompt #load string `promt
	jal printf #print
	nop
    la a0,buffer
    add a1,zero,20
	jal InputHex #InputHex string into buffer
	nop
	add s2,v0,zero
	
	la a0, ans #load string `ans
	jal printf #printf
	nop
	la a0,buffer
	add a1,s2,zero
	jal Hex2Dec
	la a0,decimal_str
	add a1,v0,zero
	jal printf
	nop

#string input in type of Hex, a0= address of string
#a0 = begin address of string
#a1 = maximum length of string
#v0 = length of string
.ent InputHex	
InputHex:
	move s1,ra #store restore address
	add s0,zero,a1 #load maximum size of `buffer
    add t0,zero,a0
	li t1,0 #t0 as i
	cont_InputHex:
		jal getchar #get 1 char
		nop
		li v1,'\n'
		sub t2,v0,v1
		beq t2,zero,finish_InputHex #if getchar() == '\n' --> finish InputHex
		nop
		ble v0,47,cont_InputHex #determine what is InputHexed
		nop
		bge v0,103,cont_InputHex #determine what is InputHexed
		nop
        slt t2,v0,65  #determine what is InputHexed
        sgt t3,v0,57 #determine what is InputHexed
        and t2,t2,t3
        beq t2,1,cont_InputHex
        nop
        slt t2,v0,97 #determine what is InputHexed
        sgt t3,v0,70 #determine what is InputHexed
        and t2,t2,t3
        beq t2,1,cont_InputHex
        nop

		add t2,v0,zero
		sb t2,0(t0) #save to buffer
		add a0,t2,zero
		jal putchar
		nop
		addi t1,t1,1 #i++
        addi t0,t0,1
		slt t2,s0,t1
		beq t2,zero,cont_InputHex #if i < maximum length --> continue getchar
		nop
	finish_InputHex:
		sb zero,0(t0) #ending zero
		add v0,t1,zero
		move ra,s1
		jr ra
		nop
.end InputHex

#convert Hex string to Deccimal number
#a0 = begining address of string
#a1 = length of string
#v0 = decimal number
.ent Hex2Dec
Hex2Dec:
	add t0,a0,zero #beginning of buffer
	add t2,a1,-1 #the last element of buffer
	add t1,t2,zero #t1 as j, j from (buffer.length-1) to 0
	li t3,0 #i in 2^i
	add v0,zero,zero
	loop_t1_Hex2Dec:
		add t4,t0,t1
		lb t5,0(t4) #t5 as buffer[j]
		beq t5,48,next_bit_Hex2Dec
		nop
        ble t5,57,cont_loop_t1_Hex2Dec
        nop
        add t5,t5,-7
        ble t5,70,cont_loop_t1_Hex2Dec
        nop
        add t5,t5,-32
        cont_loop_t1_Hex2Dec:
        add t5,t5,-48 #above intructions to compute the real t5 in decimal
		li t7,1 #t7 as 16^i
		beq t3,0,compute_dec_Hex2Dec
		nop
		li t7,16 #initialize the t7 = 16^1, then will compute t7
		li t6,0
		loop_t6_t3_Hex2Dec: #loop to compute 2^i if i>0
			add t6,t6,1
			bge t6,t3,compute_dec_Hex2Dec
			nop
			add t7,t7,t7 #*2
            add t7,t7,t7 #*2
            add t7,t7,t7 #*2
            add t7,t7,t7 #*2
			j loop_t6_t3_Hex2Dec
			nop
		compute_dec_Hex2Dec:
            li t6,0
            loop_t6_t7_Hex2Dec: #use to compute v0 = v0 + v0*16^i (i now is t7)
            	bge t6,t7,next_bit_Hex2Dec
            	nop
    			add v0,v0,t5
                add t6,t6,1
                j loop_t6_t7_Hex2Dec
                nop
		next_bit_Hex2Dec:
            add t3,t3,1 #i++, increase level of power of 2
			add t1,t1,-1 #j--
			ble t1,-1,finish_Hex2Dec #j < 0, so that nothing to read now
			nop
			j loop_t1_Hex2Dec
			nop
	finish_Hex2Dec:
	jr ra
	nop
.end Hex2Dec
#The End
